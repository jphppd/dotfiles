#!/usr/bin/env bash

########
# Misc #
########

# Read passwords. Zsh uses "?prompt" option to display a prompt and other
# shells (Bash, Ash, ...) use -p option, so use echo to be compatible.
# Dash fails with "read: Illegal option -s" as this is not POSIX-compliant.
read_pass() {
    # shellcheck disable=SC2039
    printf >&2 'Password: ' && read -r -s "$@" && echo ''
}

# Print args or use standard input (mainly for internal use)
print_args_or_stdin() {
    if [[ $# -eq 0 ]] || [[ "$1" == "-" ]]; then
        cat
    else
        while [ $# -ge 1 ]; do
            echo "$1"
            shift
        done
    fi
}

# Escape control characters when cat'ing binary streams to a TTY
# Automaticaly add -v (for --show-nonprinting) to cat parameters.
# This is known to be incompatible with busybox cat, which is detected by
# testing wether /bin/cat is a symbolic link.

ccat() {
    for current_file in "$@"; do
        if file --mime "${current_file}" | grep "charset=binary" >/dev/null; then
            # shellcheck disable=SC1117
            printf "File %s is binary, skipping\n" "${current_file}" >&2
        else
            cat "$@"

        fi
    done
}

#########
# Links #
#########

# Find broken symlinks
# shellcheck disable=SC2185
case $(find --help 2>/dev/null) in
    *-xtype*)
        find-broken() {
            find "$@" -xtype l -print
        }
        ;;
    *)
        find-broken() {
            # shellcheck disable=SC2039
            find "$@" -type l ! -exec test -e {} \; -print
        }
        ;;
esac

# Find empty directories
find-empty() {
    find "$@" -type d -empty -print
}

################################################
# Compute size of subdirectories and sort them #
################################################

du1() {
    du --human-readable --max-depth=1
}

du2() {
    du --human-readable --max-depth=2
}

dus() {
    du --human-readable "$@" | sort --human-numeric-sort
}

du1s() {
    du --human-readable --max-depth=1 "$@" | sort --human-numeric-sort
}

du2s() {
    du --human-readable --max-depth=2 "$@" | sort --human-numeric-sort
}

######################
# Generate passwords #
######################

# Generate random passwords from kernel random number generator
# see also: openssl rand -base64 16
gen_pass_alnum() {
    # Keeps alphanumeric only
    tr --complement --delete '[:alnum:]' </dev/urandom | head --bytes="${1:-16}"
    echo ''
}

gen_pass() {
    # Keeps only non-so-special symbols
    tr --complement --delete '[:alnum:]!%&*+,\-./?@^_' </dev/urandom | head --bytes="${1:-16}"
    echo ''
}

gen_pass_asc() {
    # Keeps all ASCII characters.
    tr --complement --delete '[:alnum:]!#$%&()*+,\-./:;<=>?@[\\]^_{|}' </dev/urandom | head --bytes="${1:-16}"
    echo ''
}

##########################################
# Convert timestamps from Epoch to dates #
##########################################

epoch2date() {
    if [[ $# -ge 1 ]]; then
        while [[ $# -ge 1 ]]; do
            date "--date=@$1"
            shift
        done
    else
        echo >&2 "Usage: epoch2date TIMESTAMP [...]"
    fi
}

epoch2utc() {
    if [[ $# -ge 1 ]]; then
        while [[ $# -ge 1 ]]; do
            date --utc "--date=@$1"
            shift
        done
    else
        echo >&2 "Usage: epoch2utc TIMESTAMP [...]"
    fi
}

epoch() {
    date '+%s'
}

################
# Pretty print #
################

if [[ -x /usr/bin/jq ]] || command -v jq >/dev/null; then
    pretty_json() {
        # Use jq
        jq --sort-keys <"$@"
    }
elif [[ -x /usr/bin/python ]] || command -v python >/dev/null; then
    pretty_json() {
        # Use Python's json module
        cat "$@" | python -m json.tool
    }
else
    pretty_json() {
        # Use Perl's json_pp
        cat "$@" | json_pp
    }
fi

pretty_xml() {
    # Use xmllint from libxml2
    cat "$@" | xmllint --format -
}

######################
# Number conversions #
######################

_pprint_in_number() {
    print_args_or_stdin "$@" | tr 'a-f' 'A-F' | tr --delete " " | tr --delete "'" | perl -lape 's/0x//sg' | perl -lape 's/^0//'
}

_pprint_bin_number() {
    print_args_or_stdin "$@" |
    perl -lane 'use POSIX qw/ceil/; $width=8*ceil(length($_)/8); printf("%0${width}s", $_)' |
    perl -lape "s/\d{8}\K(?=\d)/ /sg" |
    perl -lape "s/\d{4}\K(?=\d)/'/sg"
}

_pprint_hex_number() {
    print_args_or_stdin "$@" | tr 'A-F' 'a-f' |
    perl -lane 'use POSIX qw/ceil/; $width=2*ceil(length($_)/2); printf("%0${width}s", $_)' |
    perl -lape 's/([[:xdigit:]]{2})/0x$1 /sg; s/\s+$//'
}

_pprint_dec_number() {
    print_args_or_stdin "$@" |
    rev |
    perl -lape "s/\d{3}\K(?=\d)/'/sg" |
    rev
}

_pprint_oct_number(){
    print_args_or_stdin "$@" | xargs -I {} echo "0{}"
}

hex2dec() {
    (
        echo 'obase=10;ibase=16'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

hex2dec-pp() {
    print_args_or_stdin "$@" | hex2dec | _pprint_dec_number
}

hex2oct() {
    (
        echo 'obase=8;ibase=16'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

hex2oct-pp() {
    print_args_or_stdin "$@" | hex2oct | _pprint_oct_number
}

hex2bin() {
    (
        echo 'obase=2;ibase=16'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

hex2bin-pp() {
    print_args_or_stdin "$@" | hex2bin | _pprint_bin_number
}

dec2hex() {
    (
        echo 'obase=16;ibase=10'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

dec2hex-pp() {
    print_args_or_stdin "$@" | dec2hex | _pprint_hex_number
}

dec2oct() {
    (
        echo 'obase=8;ibase=10'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

dec2oct-pp() {
    print_args_or_stdin "$@" | dec2oct | _pprint_oct_number
}

dec2bin() {
    (
        echo 'obase=2;ibase=10'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

dec2bin-pp() {
    print_args_or_stdin "$@" | dec2bin | _pprint_bin_number
}

oct2hex() {
    (
        echo 'obase=16;ibase=8'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

oct2hex-pp()  {
    print_args_or_stdin "$@" | oct2hex | _pprint_hex_number
}

oct2dec() {
    (
        echo 'obase=10;ibase=8'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

oct2dec-pp() {
    print_args_or_stdin "$@" | oct2dec | _pprint_dec_number
}

oct2bin() {
    (
        echo 'obase=2;ibase=8'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

oct2bin-pp() {
    print_args_or_stdin "$@" | oct2bin | _pprint_bin_number
}

bin2hex() {
    (
        echo 'obase=16;ibase=2'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

bin2hex-pp() {
    print_args_or_stdin "$@" | bin2hex | _pprint_hex_number
}

bin2dec() {
    (
        echo 'obase=10;ibase=2'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

bin2dec-pp() {
    print_args_or_stdin "$@" | bin2dec | _pprint_dec_number
}

bin2oct() {
    (
        echo 'obase=8;ibase=2'
        print_args_or_stdin "$@" | _pprint_in_number
    ) | bc --quiet
}

bin2oct-pp() {
    print_args_or_stdin "$@" | bin2oct | _pprint_oct_number
}

##############
# Hash files #
##############

# Recursive md5sum, sha1sum, sha256sum... in directories, optional sorting
md5sumd() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec md5sum {} +
}

sha1sumd() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha1sum {} +
}

sha224sumd() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha224sum {} +
}

sha256sumd() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha256sum {} +
}

sha384sumd() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha384sum {} +
}

sha512sumd() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha512sum {} +
}

md5sumds() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec md5sum {} + | sort
}

sha1sumds() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha1sum {} + | sort
}

sha224sumds() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha224sum {} + | sort
}

sha256sumds() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha256sum {} + | sort
}

sha384sumds() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha384sum {} + | sort
}

sha512sumds() {
    # shellcheck disable=SC2039
    find "$@" -type f -exec sha512sum {} + | sort
}

########################
# IP related functions #
########################

# Sort IPv4 addresses
ipv4sort() {
    sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 "$@"
}

# Get the public IP address used by default, through HTTP or DNS
# http://ifconfig.me/ is not used as it is not HTTPS
public_ipv4_dns() {
    if [[ -x /usr/bin/dig ]] || command -v dig >/dev/null 2>&1; then
        dig +short -4 -t A myip.opendns.com @resolver1.opendns.com
    elif [[ -x /usr/bin/host ]] || command -v host >/dev/null 2>&1; then
        LANG=C host myip.opendns.com resolver1.opendns.com |
        sed -n 's/^myip\.opendns\.com has address //p'
    else
        echo >&2 'could not find commands dig or host'
        return 1
    fi
}

public_ipv6_dns() {
    if [[ -x /usr/bin/dig ]] || command -v dig >/dev/null 2>&1; then
        dig +short -6 -t AAAA myip.opendns.com @resolver1.ipv6-sandbox.opendns.com
    elif [[ -x /usr/bin/host ]] || command -v host >/dev/null 2>&1; then
        LANG=C host -6 -t AAAA myip.opendns.com resolver1.ipv6-sandbox.opendns.com |
        sed -n 's/^myip\.opendns\.com has IPv6 address //p'
    else
        echo >&2 'could not find commands dig or host'
        return 1
    fi
}

public_ipv4_https() {
    # https://ipv4.wtfismyip.com/json is also possible
    # https://ipinfo.io/ip too
    curl --silent -4 'https://diagnostic.opendns.com/myip' && echo ''
}

public_ipv6_https() {
    # https://ipv6.wtfismyip.com/json is also possible
    curl --silent -6 'https://diagnostic.opendns.com/myip' && echo ''
}

# Test the functions above
all_public_ips() {
    echo "public_ipv4_dns: $(public_ipv4_dns)"
    echo "public_ipv4_https: $(public_ipv4_https)"
    echo "public_ipv6_dns: $(public_ipv6_dns)"
    echo "public_ipv6_https: $(public_ipv6_https)"
}

#########
# Https #
#########

# Retrieve HTTPS certificate of a website
get_https_cert() {
    openssl s_client -servername "$1" -connect "$1:443" \
        -showcerts </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}

get_https_cert_proxy() {
    local S_CLIENT_PROXY
    S_CLIENT_PROXY="$(
        (
            echo "${https_proxy-}"
            echo "${HTTPS_PROXY-}"
            echo "${all_proxy-}"
            echo "${ALL_PROXY-}"
        ) |
        sed -n 's,^\(http://\)\?\([0-9a-zA-Z._-]\+:[0-9]\+\)\(/\)\?$,\2,p' |
        sed -n 1p
    )"
    if [ -z "$S_CLIENT_PROXY" ]; then
        echo >&2 "Unable to find the proxy settings"
        exit 1
    fi
    openssl s_client -servername "$1" -connect "$1:443" \
        -proxy "$S_CLIENT_PROXY" \
        -showcerts </dev/null |
    sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}
